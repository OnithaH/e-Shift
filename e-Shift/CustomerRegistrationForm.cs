using System;
using System.Data;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;
using e_Shift.Database;
using Microsoft.Data.SqlClient;

namespace e_Shift
{
    public partial class CustomerRegistrationForm : Form
    {
        public CustomerRegistrationForm()
        {
            InitializeComponent();
        }

        private void btnRegister_Click(object sender, EventArgs e)
        {
            if (!ValidateForm())
                return;

            if (RegisterCustomer())
            {
                MessageBox.Show("Registration successful!\n\nYour customer number will be provided by email.\nYou can now login to the system.",
                              "Registration Complete",
                              MessageBoxButtons.OK,
                              MessageBoxIcon.Information);
                this.DialogResult = DialogResult.OK;
                this.Close();
            }
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            this.DialogResult = DialogResult.Cancel;
            this.Close();
        }

        private bool ValidateForm()
        {
            // Required field validation
            if (string.IsNullOrWhiteSpace(txtFirstName.Text))
            {
                ShowMessage("First name is required", true);
                txtFirstName.Focus();
                return false;
            }

            if (string.IsNullOrWhiteSpace(txtLastName.Text))
            {
                ShowMessage("Last name is required", true);
                txtLastName.Focus();
                return false;
            }

            if (string.IsNullOrWhiteSpace(txtEmail.Text))
            {
                ShowMessage("Email is required", true);
                txtEmail.Focus();
                return false;
            }

            // Email format validation
            if (!IsValidEmail(txtEmail.Text))
            {
                ShowMessage("Please enter a valid email address", true);
                txtEmail.Focus();
                return false;
            }

            if (string.IsNullOrWhiteSpace(txtPassword.Text))
            {
                ShowMessage("Password is required", true);
                txtPassword.Focus();
                return false;
            }

            // Password strength validation
            if (txtPassword.Text.Length < 6)
            {
                ShowMessage("Password must be at least 6 characters long", true);
                txtPassword.Focus();
                return false;
            }

            if (txtPassword.Text != txtConfirmPassword.Text)
            {
                ShowMessage("Passwords do not match", true);
                txtConfirmPassword.Focus();
                return false;
            }

            // Check if email already exists
            if (EmailExists(txtEmail.Text))
            {
                ShowMessage("This email is already registered. Please use a different email.", true);
                txtEmail.Focus();
                return false;
            }

            return true;
        }

        private bool IsValidEmail(string email)
        {
            try
            {
                var addr = new System.Net.Mail.MailAddress(email);
                return addr.Address == email && email.Contains("@") && email.Contains(".");
            }
            catch
            {
                return false;
            }
        }

        private bool EmailExists(string email)
        {
            try
            {
                string query = "SELECT COUNT(*) FROM Customers WHERE Email = @Email AND IsDeleted = 0";
                SqlParameter[] parameters = { new SqlParameter("@Email", email) };

                object result = DatabaseConnection.ExecuteScalar(query, parameters);
                return Convert.ToInt32(result) > 0;
            }
            catch (Exception ex)
            {
                ShowMessage($"Error checking email: {ex.Message}", true);
                return false;
            }
        }

        private bool RegisterCustomer()
        {
            try
            {
                // Hash password
                byte[] passwordHash = HashPassword(txtPassword.Text);

                // Note: CustomerNumber will be auto-generated by database trigger
                string query = @"
                    INSERT INTO Customers (
                        FirstName, LastName, Email, Phone, 
                        Address, City, PostalCode, Password, RegistrationDate, 
                        IsActive, CreatedDate, ModifiedDate, IsDeleted
                    ) VALUES (
                        @FirstName, @LastName, @Email, @Phone,
                        @Address, @City, @PostalCode, @Password, @RegistrationDate,
                        1, @CreatedDate, @ModifiedDate, 0
                    )";

                SqlParameter[] parameters = {
                    new SqlParameter("@FirstName", txtFirstName.Text.Trim()),
                    new SqlParameter("@LastName", txtLastName.Text.Trim()),
                    new SqlParameter("@Email", txtEmail.Text.Trim()),
                    new SqlParameter("@Phone", string.IsNullOrWhiteSpace(txtPhone.Text) ? (object)DBNull.Value : txtPhone.Text.Trim()),
                    new SqlParameter("@Address", string.IsNullOrWhiteSpace(txtAddress.Text) ? (object)DBNull.Value : txtAddress.Text.Trim()),
                    new SqlParameter("@City", string.IsNullOrWhiteSpace(txtCity.Text) ? (object)DBNull.Value : txtCity.Text.Trim()),
                    new SqlParameter("@PostalCode", string.IsNullOrWhiteSpace(txtPostalCode.Text) ? (object)DBNull.Value : txtPostalCode.Text.Trim()),
                    new SqlParameter("@Password", passwordHash),
                    new SqlParameter("@RegistrationDate", DateTime.Now),
                    new SqlParameter("@CreatedDate", DateTime.Now),
                    new SqlParameter("@ModifiedDate", DateTime.Now)
                };

                int result = DatabaseConnection.ExecuteNonQuery(query, parameters);
                return result > 0;
            }
            catch (Exception ex)
            {
                ShowMessage($"Error registering customer: {ex.Message}", true);
                return false;
            }
        }

        private byte[] HashPassword(string password)
        {
            using (SHA256 sha256Hash = SHA256.Create())
            {
                return sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(password));
            }
        }

        private void ShowMessage(string message, bool isError)
        {
            lblStatus.Text = message;
            lblStatus.ForeColor = isError ? System.Drawing.Color.Red : System.Drawing.Color.Green;
        }
    }
}